# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  # desc "Description of what the lane does"
  # lane :custom_lane do
  #   # add actions here: https://docs.fastlane.tools/actions
  # end

    desc "Run unit tests"
    lane :tests do
      run_tests(
        scheme: "Moments",
        output_directory: "./fastlane/dist",
        output_types: "html",
        buildlog_path: "./fastlane/dist"
      )
    end

    desc "Lint and format code" 
    lane :code_format do
      swiftlint(
        mode: :autocorrect,
        executable: "./Pods/SwiftLint/swiftlint",  # Important if you've installed it via CocoaPods
        config_file: './Moments/.swiftlint.yml',
        raise_if_swiftlint_error: true)
    end
    
    desc "Lint code" 
    lane :code_lint do 
      swiftlint(
        mode: :lint,
        executable: "./Pods/SwiftLint/swiftlint",  # Important if you've installed it via CocoaPods
        config_file: './Moments/.swiftlint.yml',
        raise_if_swiftlint_error: true)
    end

    desc "Sort Xcode project files"
    lane :sort_files do
      sh "../scripts/sort-Xcode-project-file.pl ../Moments/Moments.xcodeproj"
    end

    desc "Create an archive of the Internal app for testing"
    lane :archive_internal do
      puts("create an archive for Internal app for testing")
      sync_code_signing(type: "appstore")
      build_app(scheme: "Internal",
                workspace: "Moments.xcworkspace",
                xcargs: "-allowProvisioningUpdates")
      upload_to_testflight
    end

    desc 'Creates an archive of the Production app with Appstore distribution'
    lane :archive_appstore do
      puts("Create an archive for AppStore submission")
      build_app(scheme: "AppStore",
            workspace: "Moments.xcworkspace",
            xcargs: "-allowProvisioningUpdates")
    end

    desc "Create all new provisioning profiles managed by fastlane match"
    lane :create_new_profiles do
      api_key = get_app_store_connect_api_key
      keychain_name = "TemporaryKeychain"
      keychain_password = "TemporaryKeychainPassword"
      create_keychain(
        name: keychain_name,
        password: keychain_password,
        default_keychain: false,
        timeout: 3600,
        unlock: true,
      )
      match(
        type: "adhoc",
        keychain_name: keychain_name,
        keychain_password: keychain_password,
        storage_mode: "git",
        git_url: "https://github.com/yimao009/my-moments-codesign",
        app_identifier: "jakegrz.moments.internal",
        team_id: "98T65UM47H",
        api_key: api_key
      )
      match(
        type: "appstore",
        keychain_name: keychain_name,
        keychain_password: keychain_password,
        storage_mode: "git",
        git_url: "https://github.com/yimao009/my-moments-codesign",
        app_identifier: "jakegrz.moments",
        team_id: "98T65UM47H",
        api_key: api_key
      )
    end

    desc "Download certificates and profiles"
    lane :download_profiles do
      keychain_name = "TemporaryKeychain"
      keychain_password = "TemporaryKeychainPassword"
      create_keychain(
        name: keychain_name,
        password: keychain_password,
        default_keychain: false,
        timeout: 3600,
        unlock: true,
      )
      match(
        type: "adhoc",
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password,
        storage_mode: "git",
        git_url: "https://github.com/yimao009/my-moments-codesign",
        app_identifier: "jakegrz.moments.internal",
        team_id: "98T65UM47H"
      )
      match(
        type: "appstore",
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password,
        storage_mode: "git",
        git_url: "https://github.com/yimao009/my-moments-codesign",
        app_identifier: "jakegrz.moments",
        team_id: "98T65UM47H"
      )
    end

    desc "Add a new device to provisioning profile"
    lane :add_device do |options|
      name = options[:name]
      udid = options[:udid]
      # Add to App Store Connect
      api_key = get_app_store_connect_api_key
      register_device(
        name: name,
        udid: udid,
        team_id: "98T65UM47H",
        api_key: api_key
      )
      # Update the profiles to Git private repo
      match(
        type: "adhoc",
        force: true,
        storage_mode: "git",
        git_url: "https://github.com/yimao009/my-moments-codesign",
        app_identifier: "jakegrz.moments.internal",
        team_id: "98T65UM47H",
        api_key: api_key
      )
    end

    desc "Get App Store Connect API key"
    private_lane :get_app_store_connect_api_key do
       key_content = ENV["APP_STORE_CONNECT_API_CONTENT"]
       api_key = app_store_connect_api_key(
        key_id: "Y8J45A9FTT",
        issuer_id: "bd5b248d-8584-4409-82a9-e51c23cd1834",
        key_content: "-----BEGIN EC PRIVATE KEY-----\n" + key_content + "\n-----END EC PRIVATE KEY-----",
        duration: 1200,
        in_house: false
       )
       
       api_key
    end
end
